import { GeneratedApiKey, GeneratedSessionKey, keygenOptionsNode } from '../types/index';
export declare class keygen {
    private _signer;
    private _address;
    /**
     * Creates a new ```Keygen``` instance.
     * @param { IKeyringPair["sign"] | Signer["signRaw"] } args.signer the polkadot keyring keypair interface {@link https://www.npmjs.com/package/@polkadot/kering IKeyringPair["sign"]} keypair sign type is required for node
     * or the polkadot Signer interface {@link https://www.npmjs.com/package/@polkadot/extension-dapp Signer['signRaw']} injector signer interface is required for web.
     * @param {types.string} args.address the substrate wallet address used for authentication.
     * @returns {Keygen} a new keygen instance.
     *
     * Node usage Example
     *
     * ```
     * import Keyring from "@polkadot/keyring";
     * import { cryptoWaitReady } from "@polkadot/util-crypto";
     * import { Keygen } from "analog-js/timegraph-js";
     *
     * await cryptoWaitReady();
     * const keyring = new Keyring({ type: "sr25519" });
     * const keyparir = keyring.add...();
     * const _keygen = new Keygen({ signer: keypair.sign, address: keypair.address });
     * ```
     *
     * Web usage Example
     *
     * ```
     * import { web3FromSource, web3Enable, web3Accounts } from "@polkadot/extension-dapp";
     * import { keygen } from "@analog-labs/timegraph-js/keygen/web";
     *
     * await web3Enable();
     * const accounts = await web3Accounts();
     * await web3 = await web3FromSource();
     * const _keygen = new keygen({ signer: web3.signer.signRaw, address: accounts[0].address });
     *```
     */
    constructor({ signer, address }: keygenOptionsNode);
    /**
     * Creates a new ```GeneratedApiKey```.
     * @param {role} args.role the role for the user in timegraph i.e developer, collector, user
     * @param {env} args.env environment based on signer interface
     * @returns {Promise<GeneratedApiKey>} a new generated api key
     */
    createApiKey(role?: string): Promise<GeneratedApiKey | undefined>;
    private createNodeApiKey;
    private createWebApiKey;
    /**
     * Creates a new ```GeneratedSessionKey```.
     * @param {expiration} args.expiration the expiration time in ms of the session key
     * @returns {Promise<GeneratedSessionKey>} a new generated session key
     */
    createSessionkey(expiration?: number): Promise<GeneratedSessionKey | undefined>;
    private createNodeSSK;
    private createWebSSK;
    private stringToU8a;
    private hexToU8a;
}
//# sourceMappingURL=node.d.ts.map